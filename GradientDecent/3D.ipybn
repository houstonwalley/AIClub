#3D gradient decent

from mpl_toolkits import mplot3d
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = plt.axes(projection='3d')

ALPHA = 0.01
curr_x = np.random.uniform(-1, 1)
curr_y = np.sqrt(1 - (curr_x**2))
curr_z = 1
slopex = 2 * curr_x
slopey = 2 * curr_y

ax.scatter(curr_x, curr_y, curr_z, color='red')
while abs(slopex) > .0001 or abs(slopey) > .0001:
  curr_x -= ALPHA * slopex
  curr_y -= ALPHA * slopey
  slopex = 2 * curr_x
  slopey = 2 * curr_y
  curr_z = curr_x**2 + curr_y**2
  ax.scatter(curr_x, curr_y, curr_z, color='black')

  
ax.scatter(curr_x, curr_y, curr_z, color='blue')
ax.set_title('3D Gradient Decent')
ax.set_xlabel('X Axis')
ax.set_ylabel('Y Axis')
ax.set_zlabel('Z Axis')

plt.show()
print('\nThe coordinates of the minimum are (' + str(curr_x) + ', ' + str(curr_y) + ', ' + str(curr_z) + ')')
